apiVersion: v1
kind: Pod
metadata:
  labels:
    test: liveness
  name: liveness-http
spec:
  containers:
  - name: liveness
    image: k8s.gcr.io/liveness
    args:
    - /server
    livenessProbe:
      httpGet: # Sends HTTP GET to server running in the container and listening to port 8080.
        path: /healthz #If the handler for the /healthz path returns success, container is alive and healthy.
        port: 8080 # Otherwise kubelet kills pod and restarts it
        httpHeaders: # Any code > 200 and < 400 is success
        - name: X-Custom-Header
          value: Awesome
      initialDelaySeconds: 3
      periodSeconds: 3

#/healthz handler
#http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
#    duration := time.Now().Sub(started)
#    if duration.Seconds() > 10 {
#        w.WriteHeader(500)
#        w.Write([]byte(fmt.Sprintf("error: %v", duration.Seconds())))
#    } else {
#        w.WriteHeader(200)
#        w.Write([]byte("ok"))
#    }
#})
